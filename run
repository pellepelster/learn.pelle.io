#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -eu

HUGO_DIR="${DIR}/hugo"
TEMP_DIR="${DIR}/build"
CONTENT_DIR="${HUGO_DIR}/content"
ARTEFACTS_DIR="${DIR}/artefacts"
SOURCES_DIR="${DIR}/sources"
STEPS_DIR="${SOURCES_DIR}/steps"
TODO_PROJECT_DIR="${SOURCES_DIR}/todo_project"

function insert_files() {
  local content_dir=${1:-}

  echo "looking for file includes in '${content_dir}'"
  for source_file in $(git ls-tree -r master --name-only ${content_dir}); do
    if $(grep --quiet "<!--file:.*-->" ${source_file}); then
      echo "found includes in file '${source_file}'"

      for include_filename in $(cat ${source_file} | grep -oP '(?<=\<!--file:)(.*)(?=-->)'); do
        echo "inserting file '${include_filename}' into '${source_file}'"

        local starttag="<!--file:${include_filename//\//\\/}-->"
        local endtag="<!--eof:${include_filename//\//\\/}-->"

        local include_tempfile="${TEMP_DIR}/$(basename ${include_filename}).include.tmp"
        local tempfile="${TEMP_DIR}/$(basename ${source_file}).tmp"

        echo "{{% github href=\"${include_filename}\" %}}$(basename ${include_filename}){{% /github %}}" > ${include_tempfile}
        echo "{{< highlight go \"linenos=table\" >}}" >> ${include_tempfile}
        cat ${ARTEFACTS_DIR}/${include_filename} >> ${include_tempfile}
        echo '{{< / highlight >}}' >> ${include_tempfile}

        awk "
            BEGIN       {p=1}
            /^${starttag}/   {print;system(\"cat ${include_tempfile}\");p=0}
            /^${endtag}/     {p=1}
            p" ${source_file} > ${tempfile}
        # cat ${tempfile}
        cp ${tempfile} ${source_file}
      done

    else
      echo "no include found in file '${source_file}'"
    fi
  done
}

function generate_and_insert_snippets() {

  # echo "generating snippets for '${ARTEFACTS_DIR}'"
  # (
  #   cd ${ARTEFACTS_DIR}
  #   for file in $(git ls-tree -r master --name-only .); do
  #     TEMP_DIR=${TEMP_DIR} bundle exec ruby ${DIR}/scripts/extract_snippets.rb ${file}
  #   done
  # )

  echo "inserting snippets for '${HUGO_DIR}/content'"
  (
    cd ${HUGO_DIR}/content
    for file in $(git ls-tree -r master --name-only .); do
      TEMP_DIR=${TEMP_DIR} bundle exec ruby ${DIR}/scripts/insert_snippets.rb ${file}
    done
  )


}

function task_generate {
  ensure_environment

  #insert_files ${content_dir}

  echo "running steps runfiles for '${STEPS_DIR}'"
  local last_step_dir=''
  for RUN_FILE in $(find ${STEPS_DIR} -name run | sort); do
    local step_dir=$(dirname ${RUN_FILE})

    prefix=$(realpath "${STEPS_DIR}")
    step_dir=${step_dir#${prefix}/}

    echo "running step runfile '${RUN_FILE}'"
    STEPS_DIR=${STEPS_DIR} LAST_STEP_DIR=${last_step_dir} STEP_DIR=${step_dir} TODO_PROJECT_DIR=${TODO_PROJECT_DIR} ARTEFACTS_DIR=$(readlink -f ${ARTEFACTS_DIR}) ${RUN_FILE} generate
    last_step_dir=${step_dir}
  done

  generate_and_insert_snippets
}


function ensure_environment {
  if [ ! -d ${ARTEFACTS_DIR} ]; then
      mkdir -p ${ARTEFACTS_DIR}
  fi

  if [ ! -d ${TEMP_DIR} ]; then
    mkdir ${TEMP_DIR}
  fi
}

function ensure_full_project_is_buildable {
  (
    cd ${TODO_PROJECT_DIR}
    ./gradlew build
  )
}

function task_test {
  ensure_full_project_is_buildable
  echo "testing all artefacts"
  for RUN_FILE in $(find ${STEPS_DIR} -name run); do
    TODO_PROJECT_DIR=${TODO_PROJECT_DIR} ARTEFACTS_DIR=${ARTEFACTS_DIR} ${RUN_FILE} test
  done
}

function task_build {
  ensure_environment
  task_generate
  cd ${HUGO_DIR}
  hugo
}

function task_hugo {
  cd ${HUGO_DIR}
  hugo serve
}

function task_clean {
  rm -rf ${TEMP_DIR}
}

function task_deploy {
  ncftpput -R -v -u ${FTP_USERNAME:-$(pass 'learn.pelle.io/ftp/userid')} -p ${FTP_PASSWORD:-$(pass 'learn.pelle.io/ftp/password')} ftp.pelle.io / ${HUGO_DIR}/public/*
}

function task_usage {
  echo "Usage: $0 generate | clean | test | build | deploy | hugo"
  exit 1
}

CMD=${1:-}
shift || true
case ${CMD} in
  generate) task_generate ;;
  clean) task_clean ;;
  test) task_test ;;
  build) task_build ;;
  hugo) task_hugo ;;
  deploy) task_deploy ;;
  *) task_usage ;;
esac
